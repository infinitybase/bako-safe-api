/* eslint-disable @typescript-eslint/no-unused-vars */
import Express from 'express';
import { ExpressJoiError } from 'express-joi-validation';

import GeneralError from '@utils/error/GeneralError';

enum ErrorTypes {
  App = 'app',
  Unknown = 'unknown',
}

const handleErrors = (
  err: GeneralError | ExpressJoiError,
  req: Express.Request,
  res: Express.Response,
  next: Express.NextFunction,
) => {
  process.env.API_ENVIRONMENT === 'production' &&
    console.log('[REQUEST_ERROR]', err);
  /**
   * Error generated by our API
   */
  if (err instanceof GeneralError) {
    return res.status(err.statusCode).json({
      origin: ErrorTypes.App,
      errors: err.error,
    });
  }

  /**
   * Payload/query/header (Joi) validation handler
   */
  if (err && err.type) {
    return res.status(400).json({
      origin: err.type,
      errors: err.error.details.map(joiDetail => ({
        type: joiDetail.type,
        title: joiDetail.message,
        detail: joiDetail.message,
      })),
    });
  }

  /**
   * Unknown error (can be anything)
   */
  return res.status(500).json({
    origin: ErrorTypes.Unknown,
    errors: [err],
  });
};

export { handleErrors };
